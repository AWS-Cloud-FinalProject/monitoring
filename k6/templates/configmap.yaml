apiVersion: v1
kind: ConfigMap
metadata:
  name: k6-test-script
  namespace: {{ .Release.Namespace }}
data:
  load-test.js: |
    import http from 'k6/http';
    import { sleep, check } from 'k6';
    
    export const options = {
      scenarios: {
        stress_test: {
          executor: 'ramping-vus',
          startVUs: 0,
          stages: [
            { duration: '1m', target: 50 },   // 1분 동안 50명으로 증가
            { duration: '3m', target: 50 },   // 3분 동안 50명 유지
            { duration: '1m', target: 100 },  // 1분 동안 100명으로 증가
            { duration: '5m', target: 100 },  // 5분 동안 100명 유지
            { duration: '1m', target: 0 },    // 1분 동안 0명으로 감소
          ],
        },
      },
      thresholds: {
        http_req_duration: ['p(95)<500'], // 95%의 요청이 500ms 이하여야 함
        http_req_failed: ['rate<0.1'],     // 최대 10%까지 실패 허용
      },
      summaryTrendStats: ['avg', 'min', 'med', 'max', 'p(90)', 'p(95)', 'p(99)'],
    };
    
    export function setup() {
      console.log('고강도 부하 테스트 시작...');
      return { startTime: new Date() };
    }
    
    export default function (data) {
      try {
        // 백엔드 서비스 URL 사용
        const baseUrl = '{{ .Values.targetUrl }}';
        
        // 백엔드 서비스의 health 엔드포인트로 요청
        const url = `${baseUrl}/health`;
        console.log(`요청 전송: ${url}`);
        
        const response = http.get(url);
        
        // 응답 확인
        check(response, {
          'status is 200': (r) => r.status === 200,
          'response time < 500ms': (r) => r.timings.duration < 500,
        });
      } catch (e) {
        console.error(`Error during request: ${e.message}`);
      }
      
      // 약간의 대기 시간 추가
      sleep(0.1);
    }
    
    export function teardown(data) {
      const testDuration = (new Date() - data.startTime) / 1000;
      console.log(`부하 테스트 완료! 총 실행 시간: ${testDuration}초`);
    }
