apiVersion: v1
kind: ConfigMap
metadata:
  name: k6-test-script
  namespace: {{ .Release.Namespace }}
data:
  load-test.js: |
    import http from 'k6/http';
    import { sleep, check } from 'k6';
    
    export const options = {
      scenarios: {
        stress_test: {
          executor: 'ramping-vus',
          startVUs: 0,
          stages: [
            { duration: '30s', target: 200 },  // 30초 동안 200명으로 빠르게 증가
            { duration: '4m30s', target: 500 }, // 나머지 4분 30초 동안 500명 유지
          ],
        },
      },
      thresholds: {
        http_req_duration: ['p(95)<500'], // 95%의 요청이 500ms 이하여야 함
        http_req_failed: ['rate<0.1'],     // 최대 10%까지 실패 허용
      },
      summaryTrendStats: ['avg', 'min', 'med', 'max', 'p(90)', 'p(95)', 'p(99)'],
    };
    
    export function setup() {
      console.log('고강도 부하 테스트 시작...');
      return { startTime: new Date() };
    }
    
    export default function (data) {
      try {
        // 백엔드 서비스 URL 사용
        const baseUrl = '{{ .Values.targetUrl }}';
        
        // values.yaml에 정의된 모든 엔드포인트 테스트
        {{- range .Values.endpoints }}
        const url_{{ .path | replace "/" "_" }} = `${baseUrl}{{ .path }}`;
        console.log(`요청 전송: ${url_{{ .path | replace "/" "_" }}}`);
        
        const response_{{ .path | replace "/" "_" }} = http.{{ lower .method }}(url_{{ .path | replace "/" "_" }});
        
        // 응답 확인
        check(response_{{ .path | replace "/" "_" }}, {
          '{{ .path }} status is 200': (r) => r.status === 200,
          '{{ .path }} response time < 500ms': (r) => r.timings.duration < 500,
        });
        {{- end }}
      } catch (e) {
        console.error(`Error during request: ${e.message}`);
      }
      
      // 약간의 대기 시간 추가
      sleep(0.1);
    }
    
    export function teardown(data) {
      const testDuration = (new Date() - data.startTime) / 1000;
      console.log(`부하 테스트 완료! 총 실행 시간: ${testDuration}초`);
    }
